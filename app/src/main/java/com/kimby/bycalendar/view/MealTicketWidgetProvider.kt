package com.kimby.bycalendar.view

import android.annotation.SuppressLint
import android.app.AlarmManager
import android.app.PendingIntent
import android.appwidget.AppWidgetManager
import android.appwidget.AppWidgetProvider
import android.content.ComponentName
import android.content.Context
import android.content.Intent
import android.graphics.Bitmap
import android.graphics.BitmapFactory
import android.graphics.Canvas
import android.graphics.Color
import android.graphics.Paint
import android.graphics.Typeface
import android.net.Uri
import android.os.Build
import android.view.View
import android.widget.RemoteViews
import androidx.core.net.toUri
import com.kimby.bycalendar.R
import com.kimby.bycalendar.database.PhotoDatabase
import com.kimby.bycalendar.widget.MidnightTickReceiver
import kotlinx.coroutines.CoroutineScope
import kotlinx.coroutines.Dispatchers
import kotlinx.coroutines.launch
import kotlinx.coroutines.withContext
import java.io.File
import java.io.FileOutputStream
import java.time.LocalDate
import java.time.LocalDateTime
import java.time.ZonedDateTime
import java.time.format.DateTimeFormatter
import kotlin.math.max

class MealTicketWidgetProvider : AppWidgetProvider() {
    companion object {
        const val ACTION_MARK_USED = "com.kimby.bycalendar.ACTION_MARK_USED"
        const val ACTION_SHOW_CONFIRM_DIALOG = "com.kimby.bycalendar.ACTION_SHOW_CONFIRM_DIALOG"
        const val EXTRA_IMAGE_URI = "extra_image_uri"
        const val ACTION_SHOW_PREVIOUS = "com.kimby.bycalendar.ACTION_SHOW_PREVIOUS"
        const val ACTION_SHOW_NEXT = "com.kimby.bycalendar.ACTION_SHOW_NEXT"
        const val ACTION_MIDNIGHT_TICK = "com.example.ACTION_MIDNIGHT_TICK"
        private const val ACTION_MANUAL_REFRESH = "com.kimby.bycalendar.ACTION_MANUAL_REFRESH"
        private const val REQ_CODE_MIDNIGHT = 1001
        const val ACTION_BLUR_TIMEOUT = "com.kimby.bycalendar.ACTION_BLUR_TIMEOUT"
        private const val REQ_CODE_BLUR_BASE = 50000
        private var widgetIndexMap = mutableMapOf<Int, Int>()

        // ÎÇ†Ïßú Î∞îÎÄåÎ©¥ Ïù∏Îç±Ïä§ Ï¥àÍ∏∞Ìôî Ïö©(ÏÑ†ÌÉù)
        private var lastShownDate: LocalDate? = null

        // ÌÖåÏä§Ìä∏Ïö© 5Ï¥à.  üîú  Ïã§Ï†úÎäî 5*60*1000L (5Î∂Ñ)
//        private const val BLUR_DELAY_MS_TEST = 5_000L
        private const val BLUR_DELAY_MS = 300_000L

        @SuppressLint("ServiceCast")
        fun scheduleNextMidnight(context: Context) {
            val am = context.getSystemService(Context.ALARM_SERVICE) as AlarmManager
            val pi = PendingIntent.getBroadcast(
                context,
                REQ_CODE_MIDNIGHT,
                Intent(ACTION_MIDNIGHT_TICK).setClass(context, MidnightTickReceiver::class.java),
                PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
            )
            val triggerAt = nextMidnightMillis()
            if (Build.VERSION.SDK_INT >= 31 && !am.canScheduleExactAlarms()) {
                // Ï†ïÌôï Í∂åÌïú ÏóÜÏúºÎ©¥ Í∑ºÏÇ¨ ÏòàÏïΩ
                am.setWindow(AlarmManager.RTC_WAKEUP, triggerAt, 15 * 60_000L, pi)
            } else {
                am.setExactAndAllowWhileIdle(AlarmManager.RTC_WAKEUP, triggerAt, pi)
            }
        }

        fun cancelMidnightAlarm(context: Context) {
            val am = context.getSystemService(Context.ALARM_SERVICE) as AlarmManager
            val pi = PendingIntent.getBroadcast(
                context,
                REQ_CODE_MIDNIGHT,
                Intent(ACTION_MIDNIGHT_TICK).setClass(context, MidnightTickReceiver::class.java),
                PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
            )
            am.cancel(pi)
        }

        private fun nextMidnightMillis(): Long {
            val now = ZonedDateTime.now()
            val next = now.toLocalDate().plusDays(1).atStartOfDay(now.zone)
            return next.toInstant().toEpochMilli()
        }

        private const val ACTION_WIDGET_TAP = "com.kimby.bycalendar.ACTION_WIDGET_TAP"
        private const val PREFS_NAME = "meal_widget_prefs"
        private const val KEY_LAST_TOUCH_PREFIX = "last_touch_"

        private fun nowMillis() = System.currentTimeMillis()
        private fun getLastTouch(context: Context, id: Int): Long =
            context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)
                .getLong("$KEY_LAST_TOUCH_PREFIX$id", 0L)

        private fun setLastTouch(context: Context, id: Int, time: Long = nowMillis()) {
            context.getSharedPreferences(PREFS_NAME, Context.MODE_PRIVATE)
                .edit().putLong("$KEY_LAST_TOUCH_PREFIX$id", time).apply()
        }
    }

    override fun onUpdate(
        context: Context,
        appWidgetManager: AppWidgetManager,
        appWidgetIds: IntArray
    ) {
        // Í∏∞Ï°¥ Î°úÏßÅ Ïú†ÏßÄ
        for (appWidgetId in appWidgetIds) {
            updateAppWidget(context, appWidgetManager, appWidgetId)
        }
        // ÏûêÏ†ï ÏòàÏïΩ Î≥¥Í∞ï
        scheduleNextMidnight(context)
    }

    override fun onReceive(context: Context, intent: Intent) { 
        super.onReceive(context, intent)
        when (intent.action) {
            ACTION_WIDGET_TAP -> {
                val id = intent.getIntExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, AppWidgetManager.INVALID_APPWIDGET_ID)
                if (id != AppWidgetManager.INVALID_APPWIDGET_ID) {
                    setLastTouch(context, id)
                    scheduleBlurTimeout(context, id)  // ‚Üê Ï∂îÍ∞Ä
                    updateAppWidget(context, AppWidgetManager.getInstance(context), id)
                }
            }
            ACTION_BLUR_TIMEOUT -> {
                val id = intent.getIntExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, AppWidgetManager.INVALID_APPWIDGET_ID)
                if (id != AppWidgetManager.INVALID_APPWIDGET_ID) {
                    // Ïó¨Í∏∞ÏÑúÎäî lastTouchÎ•º Í±¥ÎìúÎ¶¨ÏßÄ ÎßêÍ≥†, Í∑∏ÎÉ• Í∞±Ïã†Ìï¥ÏÑú blur ÎêòÍ≤åÎßå Ìï®
                    updateAppWidget(context, AppWidgetManager.getInstance(context), id)
                }
            }
            ACTION_MANUAL_REFRESH -> {
                val id = intent.getIntExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, AppWidgetManager.INVALID_APPWIDGET_ID)
                if (id != AppWidgetManager.INVALID_APPWIDGET_ID) {
                    setLastTouch(context, id)           // ÏàòÎèôÎßå ÏÉÅÌò∏ÏûëÏö©ÏúºÎ°ú Í∞ÑÏ£º
                    scheduleBlurTimeout(context, id)  // ‚Üê Ï∂îÍ∞Ä
                    updateAppWidget(context, AppWidgetManager.getInstance(context), id)
                }
            }
            ACTION_MARK_USED -> {
                // Í∏∞Ï°¥ Ï≤òÎ¶¨ Ïú†ÏßÄ + ÏÉÅÌò∏ÏûëÏö©ÏúºÎ°ú Í∞ÑÏ£º
//                val uri = intent.getStringExtra(EXTRA_IMAGE_URI)?.toUri() ?: return
//                val ids = AppWidgetManager.getInstance(context).getAppWidgetIds(ComponentName(context, MealTicketWidgetProvider::class.java))
//                ids.forEach { setLastTouch(context, it) }
                val uri = intent.getStringExtra(EXTRA_IMAGE_URI)?.toUri() ?: return
                val id = intent.getIntExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, AppWidgetManager.INVALID_APPWIDGET_ID)

                // (mark Ï≤òÎ¶¨ ÌõÑ update Ìò∏Ï∂úÏùÄ ÎÑ§ Í∏∞Ï°¥ Î°úÏßÅÎåÄÎ°ú)
                markImageAsUsed(context, uri)
                // DB Í∞±Ïã† ÏôÑÎ£å ÌõÑ:
                val mgr = AppWidgetManager.getInstance(context)
                if (id != AppWidgetManager.INVALID_APPWIDGET_ID) {
                    setLastTouch(context, id)           // ÏÉÅÌò∏ÏûëÏö© ÏãúÍ∞Å Í∞±Ïã†
                    scheduleBlurTimeout(context, id)    // Ïû¨ÌùêÎ¶º ÏòàÏïΩ
                    updateAppWidget(context, mgr, id)   // Ìï¥Îãπ ÏúÑÏ†ØÎßå Ï¶âÏãú Í∞±Ïã†
                } else {
                    // id ÏóÜÏúºÎ©¥ Î™®Îì† ÏúÑÏ†Ø Í∞±Ïã†(Í∏∞Ï°¥ Î°úÏßÅ Ïú†ÏßÄ)
                    val ids = mgr.getAppWidgetIds(ComponentName(context, MealTicketWidgetProvider::class.java))
                    ids.forEach {
                        setLastTouch(context, it)
                        scheduleBlurTimeout(context, it)
                        updateAppWidget(context, mgr, it)
                    }
                }
            }
            ACTION_SHOW_CONFIRM_DIALOG -> {
                val uriStr = intent.getStringExtra(EXTRA_IMAGE_URI) ?: return
                val id = intent.getIntExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, AppWidgetManager.INVALID_APPWIDGET_ID)

                if (id != AppWidgetManager.INVALID_APPWIDGET_ID) {
                    setLastTouch(context, id)                 // ‚òÖ ÌÑ∞ÏπòÎ°ú Í∞ÑÏ£º
                    scheduleBlurTimeout(context, id)          // ‚òÖ Ïû¨ÌùêÎ¶º ÏòàÏïΩ(5Ï¥à/30Î∂Ñ)
                }

                val dialogIntent = Intent(context, WidgetConfirmActivity::class.java).apply {
                    flags = Intent.FLAG_ACTIVITY_NEW_TASK
                    putExtra(EXTRA_IMAGE_URI, uriStr)
                    putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, id)   // ‚òÖ Ïï°Ìã∞ÎπÑÌã∞Î°ú Ï†ÑÎã¨
                }
                context.startActivity(dialogIntent)
            }
            ACTION_SHOW_PREVIOUS, ACTION_SHOW_NEXT -> {
                val appWidgetId = intent.getIntExtra(
                    AppWidgetManager.EXTRA_APPWIDGET_ID,
                    AppWidgetManager.INVALID_APPWIDGET_ID
                )
                if (appWidgetId != AppWidgetManager.INVALID_APPWIDGET_ID) {
                    setLastTouch(context, appWidgetId)
                    scheduleBlurTimeout(context, appWidgetId)  // ‚Üê Ï∂îÍ∞Ä
                    val direction = if (intent.action == ACTION_SHOW_PREVIOUS) -1 else 1
                    updateAppWidget(
                        context,
                        AppWidgetManager.getInstance(context),
                        appWidgetId,
                        direction
                    )
                }
            }
            AppWidgetManager.ACTION_APPWIDGET_UPDATE -> {
                // ÏãúÏä§ÌÖúÏù¥ Ï£ºÍ∏∞/Ïû¨Î∞∞Ïπò Îì±ÏúºÎ°ú Î≥¥ÎÇ∏ ÏóÖÎç∞Ïù¥Ìä∏
                // Ïó¨Í∏∞ÏÑúÎäî Ï†àÎåÄ setLastTouch() ÌïòÏßÄ Îßê Í≤É!
                val ids = intent.getIntArrayExtra(AppWidgetManager.EXTRA_APPWIDGET_IDS)
                    ?: AppWidgetManager.getInstance(context).getAppWidgetIds(ComponentName(context, MealTicketWidgetProvider::class.java))
                onUpdate(context, AppWidgetManager.getInstance(context), ids)
            }
        }
    }

    fun resizeBitmapToFitWidget(bitmap: Bitmap, maxWidth: Int, maxHeight: Int): Bitmap {
        // RemoteViews Ï†úÌïú: 1Ïû•Ïùò ÏµúÎåÄ ÌÅ¨Í∏∞Îäî ÏïΩ 1.5MB Ï†ïÎèÑÎ°ú Ï∂îÏ†ïÎê®
        val maxPixels = maxWidth * maxHeight

        // ÏõêÎ≥∏ ÌÅ¨Í∏∞ Í∞ÄÏ†∏Ïò§Í∏∞
        val originalWidth = bitmap.width
        val originalHeight = bitmap.height

        // Ï∂ïÏÜå ÎπÑÏú® Í≥ÑÏÇ∞ (ÎπÑÏú® Ïú†ÏßÄ)
        val widthRatio = maxWidth.toFloat() / originalWidth
        val heightRatio = maxHeight.toFloat() / originalHeight
        val ratio = minOf(widthRatio, heightRatio, 1.0f) // ÌôïÎåÄÎäî Î∞©ÏßÄ

        // ÏµúÏ¢Ö ÌÅ¨Í∏∞ Í≥ÑÏÇ∞
        val newWidth = (originalWidth * ratio).toInt().coerceAtLeast(1)
        val newHeight = (originalHeight * ratio).toInt().coerceAtLeast(1)

        return Bitmap.createScaledBitmap(bitmap, newWidth, newHeight, true)
    }

    private fun markImageAsUsed(context: Context, uri: Uri) {
        val file = File(uri.path ?: return)
        if (!file.exists()) return

        val baseBitmap = BitmapFactory.decodeFile(file.absolutePath)
        val mutableBitmap = baseBitmap.copy(Bitmap.Config.ARGB_8888, true)
        val canvas = Canvas(mutableBitmap)

        // Ïò§Î≤ÑÎ†àÏù¥ Ïù¥ÎØ∏ÏßÄ Î∂àÎü¨Ïò§Í∏∞
        val overlay = BitmapFactory.decodeResource(context.resources, R.drawable.used_stamp_red)

        // Ïò§Î≤ÑÎ†àÏù¥Î•º ÏõêÎ≥∏ Ïù¥ÎØ∏ÏßÄ ÎÑàÎπÑÏùò 60% ÌÅ¨Í∏∞Ïùò Ï†ïÏÇ¨Í∞ÅÌòïÏúºÎ°ú Ï°∞Ï†ï
        val overlaySize = (baseBitmap.width * 0.6f).toInt()
        val scaledOverlay = Bitmap.createScaledBitmap(overlay, overlaySize, overlaySize, true)

        // ÏõêÎ≥∏ Ïù¥ÎØ∏ÏßÄ Ï§ëÏïôÏóê ÏúÑÏπò
        val left = (baseBitmap.width - overlaySize) / 2f
        val top = (baseBitmap.height - overlaySize) / 2f
        canvas.drawBitmap(scaledOverlay, left, top, null)

        // ‚úÖ 2. ÌòÑÏû¨ ÏãúÍ∞Ñ Í∞ÄÏ†∏Ïò§Í∏∞
        val formatter = DateTimeFormatter.ofPattern("yyyy-MM-dd HH:mm:ss")
        val now = LocalDateTime.now().format(formatter)
        val message = "ÏÇ¨Ïö©ÏôÑÎ£å : $now"

        // ‚úÖ 3. ÌÖçÏä§Ìä∏ ÌéòÏù∏Ìä∏ ÏÑ§Ï†ï
        val paint = Paint().apply {
            color = Color.BLACK
            textSize = baseBitmap.width * 0.06f  // Ïù¥ÎØ∏ÏßÄ ÎÑàÎπÑ Í∏∞Ï§ÄÏúºÎ°ú Í∏ÄÏûê ÌÅ¨Í∏∞ ÏÑ§Ï†ï
            typeface = Typeface.create(Typeface.DEFAULT, Typeface.BOLD)
            setShadowLayer(5f, 3f, 3f, Color.WHITE) // Í∏ÄÏûê Í∞ÄÎèÖÏÑ± Ìñ•ÏÉÅÏö© Í∑∏Î¶ºÏûê
            isAntiAlias = true
        }

        // ‚úÖ 4. ÌÖçÏä§Ìä∏ ÏúÑÏπò Í≥ÑÏÇ∞ (Ïö∞Ï∏° ÌïòÎã® Í∏∞Ï§Ä padding)
        val padding = 20f
        val textWidth = paint.measureText(message)
        val x = baseBitmap.width - textWidth - padding
        val y = baseBitmap.height - padding

        // ‚úÖ 5. ÌÖçÏä§Ìä∏ Í∑∏Î¶¨Í∏∞
        canvas.drawText(message, x, y, paint)

        // ÏÉà ÌååÏùºÎ°ú Ï†ÄÏû•
        val newFile = File(file.parent, file.nameWithoutExtension + "_used.jpg")
        FileOutputStream(newFile).use {
            mutableBitmap.compress(Bitmap.CompressFormat.JPEG, 90, it)
        }

        // DB Í≤ΩÎ°ú Í∞±Ïã†
        CoroutineScope(Dispatchers.IO).launch {
            val dao = PhotoDatabase.getDatabase(context).photoDao()
            dao.updatePhotoPathAndUsed(file.absolutePath, newFile.absolutePath)
            withContext(Dispatchers.Main) {
                // ÏúÑÏ†Ø Í∞±Ïã†
                val manager = AppWidgetManager.getInstance(context)
                val ids = manager.getAppWidgetIds(
                    ComponentName(
                        context,
                        MealTicketWidgetProvider::class.java
                    )
                )
                ids.forEach {
                    updateAppWidget(context, manager, it)
                }
            }
        }
    }

    override fun onDeleted(context: Context, appWidgetIds: IntArray) {
        for (appWidgetId in appWidgetIds) {
            // ÏÇ≠Ï†ú Ïãú Ï≤òÎ¶¨Ìï† Î°úÏßÅ ÌïÑÏöî Ïãú Íµ¨ÌòÑ
        }
    }

    override fun onEnabled(context: Context) {
        // Ïï± ÏúÑÏ†ØÏù¥ Ï≤òÏùå Ï∂îÍ∞ÄÎê† Îïå: Î∞îÎ°ú ÏÑ†Î™ÖÌïòÍ≤å
        val manager = AppWidgetManager.getInstance(context)
        val ids = manager.getAppWidgetIds(ComponentName(context, MealTicketWidgetProvider::class.java))
        ids.forEach {
            setLastTouch(context, it)
            scheduleBlurTimeout(context, it) // 5Ï¥à/30Î∂Ñ ÌõÑ ÏûêÎèô ÌùêÎ¶º}
        }
        scheduleNextMidnight(context)
    }

    override fun onDisabled(context: Context) {
        // Î™®Îì† ÏúÑÏ†Ø Ï†úÍ±∞ ‚Üí ÏïåÎûå Ìï¥Ï†ú + Í∏∞Î°ù Ï†ïÎ¶¨(ÏÑ†ÌÉù)
        val mgr = AppWidgetManager.getInstance(context)
        val ids = mgr.getAppWidgetIds(ComponentName(context, MealTicketWidgetProvider::class.java))
        ids.forEach { cancelBlurTimeout(context, it) }
        cancelMidnightAlarm(context)
        // prefs Ï†ïÎ¶¨Îäî ÏÑ†ÌÉùÏÇ¨Ìï≠
    }

    @SuppressLint("RemoteViewLayout")
    internal fun updateAppWidget(
        context: Context,
        appWidgetManager: AppWidgetManager,
        appWidgetId: Int,
        direction: Int = 0
    ) {
        val views = RemoteViews(context.packageName, R.layout.widget_meal_ticket)
        val today = LocalDate.now().toString()
        val photoDao = PhotoDatabase.getDatabase(context).photoDao()
        // ÎÇ†Ïßú Î∞îÎÄåÎ©¥ Ïù∏Îç±Ïä§ Î¶¨ÏÖã
        if (lastShownDate?.toString() != today) {
            widgetIndexMap.clear()
            lastShownDate = LocalDate.parse(today)
        }

        CoroutineScope(Dispatchers.IO).launch {
            val tickets = photoDao.getPhotosByDate(today, "ÏãùÍ∂å")
            withContext(Dispatchers.Main) {
                if (tickets.isNotEmpty()) {

                    val currentIndex = widgetIndexMap.getOrDefault(appWidgetId, 0)
                    val newIndex = (currentIndex + direction).coerceIn(0, tickets.size - 1)
                    widgetIndexMap[appWidgetId] = newIndex

                    val photo = tickets[newIndex]
                    val imageFile = File(photo.path)

                    if (imageFile.exists()) {
                        val bmp = BitmapFactory.decodeFile(imageFile.absolutePath)

                        // üîΩ ÍµêÏ≤¥ ÏãúÏûë
                        val resizedBmp = resizeBitmapToFitWidget(bmp, 400, 400)

                        // 5Î∂Ñ Í≤ΩÍ≥º Ïó¨Î∂Ä ÌåêÎã®
                        val lastTouch = getLastTouch(context, appWidgetId)
                        val fiveMin = 300000L
                        val testDelay = 5000L // ÌÖåÏäΩÌä∏Ïö© 5Ï¥à

                        // ÏµúÏ¥à ÌÑ∞Ïπò Í∏∞Î°ù ÏóÜÏúºÎ©¥ ÏßÄÍ∏à ÏãúÍ∞ÅÏúºÎ°ú Ï¥àÍ∏∞Ìôî
                        if (lastTouch == 0L) {
                            setLastTouch(context, appWidgetId)
                        }

                        val shouldBlur = (nowMillis() - getLastTouch(context, appWidgetId)) >= fiveMin

                        val shouldBlurTest = (nowMillis() - getLastTouch(context, appWidgetId)) >= testDelay

                        // üí° Ïó¨Í∏∞ÏÑú DefaultÎ°ú blur Í≥ÑÏÇ∞
                        val displayBmp = withContext(Dispatchers.Default) {
                            if (!shouldBlur) resizedBmp
                            else addDimOverlay(blurCompat(resizedBmp, radius = 20f, passes = 2), alpha = 80)
                        }

                        // MainÏóêÏÑú RemoteViews Ï†ÅÏö©
                        withContext(Dispatchers.Main) {
                            // Ïù¥ÎØ∏ÏßÄ Ï†ÅÏö©
                            views.setImageViewBitmap(R.id.widget_image, displayBmp)
                            views.setTextViewText(
                                R.id.widget_title,
                                "$today Ïò§Îäò ÏãùÍ∂å (${newIndex + 1} / ${tickets.size})"
                            )

                            // Ïù¥ÎØ∏ÏßÄ ÌÉ≠ÌïòÎ©¥ ÏÑ†Î™ÖÌï¥ÏßÄÎèÑÎ°ù ÌÅ¥Î¶≠ Ïù∏ÌÖêÌä∏ Ïó∞Í≤∞
                            val tapIntent =
                                Intent(context, MealTicketWidgetProvider::class.java).apply {
                                    action = ACTION_WIDGET_TAP
                                    putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, appWidgetId)
                                }
                            val tapPendingIntent = PendingIntent.getBroadcast(
                                context,
                                appWidgetId * 111,
                                tapIntent,
                                PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
                            )
                            views.setOnClickPendingIntent(R.id.widget_image, tapPendingIntent)
                            // üîΩ ÍµêÏ≤¥ ÎÅù

                            //  ‚úÖ ÏÇ¨Ïö© Ï≤òÎ¶¨ Î≤ÑÌäº üîú Îã§Ïù¥ÏñºÎ°úÍ∑∏ ÌôïÏù∏ Ï≤òÎ¶¨
                            val useIntent =
                                Intent(context, MealTicketWidgetProvider::class.java).apply {
                                    action = ACTION_SHOW_CONFIRM_DIALOG
                                    putExtra(EXTRA_IMAGE_URI, imageFile.toUri().toString())
                                    putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, appWidgetId)   // ‚òÖ Ï∂îÍ∞Ä
                                }
                            val usePendingIntent = PendingIntent.getBroadcast(
                                context,
                                appWidgetId * 1000,
                                useIntent,
                                PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
                            )
                            views.setOnClickPendingIntent(
                                R.id.btn_mark_used_container,
                                usePendingIntent
                            )

                            // ÏÇ¨Ïö© ÏôÑÎ£å Ïó¨Î∂ÄÏóê Îî∞Îùº Î≤ÑÌäº Ïä§ÌÉÄÏùº Î≥ÄÍ≤Ω
                            if (photo.used) {
                                views.setImageViewResource(
                                    R.id.btn_mark_used_bg,
                                    R.drawable.btn_used_128x57_gray
                                ) // Î∞òÌà¨Î™Ö Ïù¥ÎØ∏ÏßÄ
                                views.setOnClickPendingIntent(
                                    R.id.btn_mark_used_container,
                                    null
                                ) // ÌÅ¥Î¶≠ ÎßâÍ∏∞
                                views.setTextViewText(R.id.btn_mark_used_text, "ÏÇ¨Ïö© ÏôÑÎ£å") // ÌÖçÏä§Ìä∏ Î≥ÄÍ≤Ω
                            } else {
                                views.setImageViewResource(
                                    R.id.btn_mark_used_bg,
                                    R.drawable.btn_used_128x57
                                )
                                views.setOnClickPendingIntent(
                                    R.id.btn_mark_used_container,
                                    usePendingIntent
                                )
                                views.setTextViewText(R.id.btn_mark_used_text, "ÏÇ¨Ïö© Ï≤òÎ¶¨")
                            }

                            // Ï¢åÏö∞ ÌôîÏÇ¥Ìëú Î≤ÑÌäº ÌëúÏãú Ïó¨Î∂Ä
                            views.setViewVisibility(
                                R.id.btn_prev,
                                if (newIndex > 0) View.VISIBLE else View.INVISIBLE
                            )
                            views.setViewVisibility(
                                R.id.btn_next,
                                if (newIndex < tickets.size - 1) View.VISIBLE else View.INVISIBLE
                            )

                            // ‚úÖ Ïù¥Ï†Ñ Î≤ÑÌäº
                            val prevIntent =
                                Intent(context, MealTicketWidgetProvider::class.java).apply {
                                    action = ACTION_SHOW_PREVIOUS
                                    putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, appWidgetId)
                                }
                            val prevPendingIntent = PendingIntent.getBroadcast(
                                context,
                                appWidgetId * 10,
                                prevIntent,
                                PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
                            )
                            views.setOnClickPendingIntent(R.id.btn_prev, prevPendingIntent)

                            // ‚úÖ Îã§Ïùå Î≤ÑÌäº
                            val nextIntent =
                                Intent(context, MealTicketWidgetProvider::class.java).apply {
                                    action = ACTION_SHOW_NEXT
                                    putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, appWidgetId)
                                }
                            val nextPendingIntent = PendingIntent.getBroadcast(
                                context,
                                appWidgetId * 10 + 1,
                                nextIntent,
                                PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
                            )
                            views.setOnClickPendingIntent(R.id.btn_next, nextPendingIntent)

                            //  ‚úÖ ÏúÑÏ†Ø Í∞±Ïã† Î≤ÑÌäº (ÏàòÎèô)
                            val refreshIntent =
                                Intent(context, MealTicketWidgetProvider::class.java).apply {
                                    action = ACTION_MANUAL_REFRESH
                                    putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, appWidgetId)
                                }
                            val refreshPendingIntent = PendingIntent.getBroadcast(
                                context,
                                appWidgetId * 10000,
                                refreshIntent,
                                PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
                            )
                            views.setOnClickPendingIntent(R.id.btn_refresh_bg, refreshPendingIntent)
                        }
                    }
                } else {
                    views.setTextViewText(R.id.widget_title, "Ïò§Îäò ÏãùÍ∂å (0/0)")
                    views.setImageViewBitmap(R.id.widget_image, null)
                    views.setViewVisibility(R.id.btn_prev, View.GONE)
                    views.setViewVisibility(R.id.btn_next, View.GONE)
                }
                appWidgetManager.updateAppWidget(appWidgetId, views)
            }
        }
    }

    /**
     * Îçî Í∞ïÌïú Î∏îÎü¨ (passesÎ°ú ÎàÑÏ†Å)
     */
    private fun blurCompat(
        src: Bitmap,
        radius: Float = 12f,     // ÎÜíÏùºÏàòÎ°ù Í∞ïÌï® (Ïòà: 16f~24f)
        passes: Int = 1          // 2~3 Ï£ºÎ©¥ Ìõ®Ïî¨ ÏßÑÌï¥Ïßê
    ): Bitmap {
        var work = src
        var owns = false
        val factor = max(2, (radius / 2f).toInt()) // Í∏∞Ï°¥ 4fÎ≥¥Îã§ 2fÎ©¥ Îçî Í∞ïÌïòÍ≤å

        repeat(passes) {
            val w = max(1, work.width / factor)
            val h = max(1, work.height / factor)
            val small = Bitmap.createScaledBitmap(work, w, h, true)
            val up = Bitmap.createScaledBitmap(small, src.width, src.height, true)
            if (work !== src && owns) work.recycle()
            small.recycle()
            work = up
            owns = true
        }
        // Í≤∞Í≥ºÎäî ARGB_8888 Î≥¥Ïû• ÏïÑÎãò ‚Üí ÌïÑÏöîÌïòÎ©¥ Î≥µÏÇ¨
        return if (work.config == Bitmap.Config.ARGB_8888) work
        else work.copy(Bitmap.Config.ARGB_8888, false).also { work.recycle() }
    }

    /**
     * Îçî ‚ÄúÎøåÏòáÍ≤å‚Äù Î≥¥Ïù¥Í≤å ‚Äî Îî§ Ïò§Î≤ÑÎ†àÏù¥ Ï∂îÍ∞Ä(ÏÑ†ÌÉù)
     */
    private fun addDimOverlay(src: Bitmap, alpha: Int = 80): Bitmap {
        val out = src.copy(Bitmap.Config.ARGB_8888, true)
        val c = Canvas(out)
        val p = Paint()
        p.color = Color.argb(alpha.coerceIn(0, 255), 0, 0, 0)
        c.drawRect(0f, 0f, out.width.toFloat(), out.height.toFloat(), p)
        return out
    }

    /**
     * Blur ÏòàÏïΩ Ìï®Ïàò Ï∂îÍ∞Ä
     */
    private fun scheduleBlurTimeout(context: Context, appWidgetId: Int, delayMs: Long = BLUR_DELAY_MS) {
        val am = context.getSystemService(Context.ALARM_SERVICE) as AlarmManager
        val pi = PendingIntent.getBroadcast(
            context,
            REQ_CODE_BLUR_BASE + appWidgetId,
            Intent(ACTION_BLUR_TIMEOUT).setClass(context, MealTicketWidgetProvider::class.java)
                .putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, appWidgetId),
            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
        )
        val triggerAt = System.currentTimeMillis() + delayMs
        if (Build.VERSION.SDK_INT >= 31 && !am.canScheduleExactAlarms()) {
            am.setWindow(AlarmManager.RTC_WAKEUP, triggerAt, /*windowLength*/ 5_000L, pi)
        } else {
            am.setExactAndAllowWhileIdle(AlarmManager.RTC_WAKEUP, triggerAt, pi)
        }
    }

    /**
     * Blur Ï∑®ÏÜå Ìï®Ïàò Ï∂îÍ∞Ä
     */
    private fun cancelBlurTimeout(context: Context, appWidgetId: Int) {
        val am = context.getSystemService(Context.ALARM_SERVICE) as AlarmManager
        val pi = PendingIntent.getBroadcast(
            context,
            REQ_CODE_BLUR_BASE + appWidgetId,
            Intent(ACTION_BLUR_TIMEOUT).setClass(context, MealTicketWidgetProvider::class.java)
                .putExtra(AppWidgetManager.EXTRA_APPWIDGET_ID, appWidgetId),
            PendingIntent.FLAG_UPDATE_CURRENT or PendingIntent.FLAG_IMMUTABLE
        )
        am.cancel(pi)
    }


}
